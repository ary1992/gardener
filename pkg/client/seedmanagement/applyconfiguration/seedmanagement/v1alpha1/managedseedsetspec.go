/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ManagedSeedSetSpecApplyConfiguration represents an declarative configuration of the ManagedSeedSetSpec type for use
// with apply.
type ManagedSeedSetSpecApplyConfiguration struct {
	Replicas             *int32                                 `json:"replicas,omitempty"`
	Selector             *v1.LabelSelector                      `json:"selector,omitempty"`
	Template             *ManagedSeedTemplateApplyConfiguration `json:"template,omitempty"`
	ShootTemplate        *v1beta1.ShootTemplate                 `json:"shootTemplate,omitempty"`
	UpdateStrategy       *UpdateStrategyApplyConfiguration      `json:"updateStrategy,omitempty"`
	RevisionHistoryLimit *int32                                 `json:"revisionHistoryLimit,omitempty"`
}

// ManagedSeedSetSpecApplyConfiguration constructs an declarative configuration of the ManagedSeedSetSpec type for use with
// apply.
func ManagedSeedSetSpec() *ManagedSeedSetSpecApplyConfiguration {
	return &ManagedSeedSetSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithReplicas(value int32) *ManagedSeedSetSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithSelector(value v1.LabelSelector) *ManagedSeedSetSpecApplyConfiguration {
	b.Selector = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithTemplate(value *ManagedSeedTemplateApplyConfiguration) *ManagedSeedSetSpecApplyConfiguration {
	b.Template = value
	return b
}

// WithShootTemplate sets the ShootTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ShootTemplate field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithShootTemplate(value v1beta1.ShootTemplate) *ManagedSeedSetSpecApplyConfiguration {
	b.ShootTemplate = &value
	return b
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithUpdateStrategy(value *UpdateStrategyApplyConfiguration) *ManagedSeedSetSpecApplyConfiguration {
	b.UpdateStrategy = value
	return b
}

// WithRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RevisionHistoryLimit field is set to the value of the last call.
func (b *ManagedSeedSetSpecApplyConfiguration) WithRevisionHistoryLimit(value int32) *ManagedSeedSetSpecApplyConfiguration {
	b.RevisionHistoryLimit = &value
	return b
}
