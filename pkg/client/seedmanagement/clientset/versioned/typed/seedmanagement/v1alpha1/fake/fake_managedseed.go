/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/gardener/gardener/pkg/apis/seedmanagement/v1alpha1"
	seedmanagementv1alpha1 "github.com/gardener/gardener/pkg/client/seedmanagement/applyconfiguration/seedmanagement/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeManagedSeeds implements ManagedSeedInterface
type FakeManagedSeeds struct {
	Fake *FakeSeedmanagementV1alpha1
	ns   string
}

var managedseedsResource = v1alpha1.SchemeGroupVersion.WithResource("managedseeds")

var managedseedsKind = v1alpha1.SchemeGroupVersion.WithKind("ManagedSeed")

// Get takes name of the managedSeed, and returns the corresponding managedSeed object, and an error if there is any.
func (c *FakeManagedSeeds) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ManagedSeed, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(managedseedsResource, c.ns, name), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// List takes label and field selectors, and returns the list of ManagedSeeds that match those selectors.
func (c *FakeManagedSeeds) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ManagedSeedList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(managedseedsResource, managedseedsKind, c.ns, opts), &v1alpha1.ManagedSeedList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ManagedSeedList{ListMeta: obj.(*v1alpha1.ManagedSeedList).ListMeta}
	for _, item := range obj.(*v1alpha1.ManagedSeedList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested managedSeeds.
func (c *FakeManagedSeeds) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(managedseedsResource, c.ns, opts))

}

// Create takes the representation of a managedSeed and creates it.  Returns the server's representation of the managedSeed, and an error, if there is any.
func (c *FakeManagedSeeds) Create(ctx context.Context, managedSeed *v1alpha1.ManagedSeed, opts v1.CreateOptions) (result *v1alpha1.ManagedSeed, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(managedseedsResource, c.ns, managedSeed), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// Update takes the representation of a managedSeed and updates it. Returns the server's representation of the managedSeed, and an error, if there is any.
func (c *FakeManagedSeeds) Update(ctx context.Context, managedSeed *v1alpha1.ManagedSeed, opts v1.UpdateOptions) (result *v1alpha1.ManagedSeed, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(managedseedsResource, c.ns, managedSeed), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeManagedSeeds) UpdateStatus(ctx context.Context, managedSeed *v1alpha1.ManagedSeed, opts v1.UpdateOptions) (*v1alpha1.ManagedSeed, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(managedseedsResource, "status", c.ns, managedSeed), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// Delete takes name of the managedSeed and deletes it. Returns an error if one occurs.
func (c *FakeManagedSeeds) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(managedseedsResource, c.ns, name, opts), &v1alpha1.ManagedSeed{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeManagedSeeds) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(managedseedsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ManagedSeedList{})
	return err
}

// Patch applies the patch and returns the patched managedSeed.
func (c *FakeManagedSeeds) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ManagedSeed, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(managedseedsResource, c.ns, name, pt, data, subresources...), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied managedSeed.
func (c *FakeManagedSeeds) Apply(ctx context.Context, managedSeed *seedmanagementv1alpha1.ManagedSeedApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.ManagedSeed, err error) {
	if managedSeed == nil {
		return nil, fmt.Errorf("managedSeed provided to Apply must not be nil")
	}
	data, err := json.Marshal(managedSeed)
	if err != nil {
		return nil, err
	}
	name := managedSeed.Name
	if name == nil {
		return nil, fmt.Errorf("managedSeed.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(managedseedsResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeManagedSeeds) ApplyStatus(ctx context.Context, managedSeed *seedmanagementv1alpha1.ManagedSeedApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.ManagedSeed, err error) {
	if managedSeed == nil {
		return nil, fmt.Errorf("managedSeed provided to Apply must not be nil")
	}
	data, err := json.Marshal(managedSeed)
	if err != nil {
		return nil, err
	}
	name := managedSeed.Name
	if name == nil {
		return nil, fmt.Errorf("managedSeed.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(managedseedsResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1alpha1.ManagedSeed{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ManagedSeed), err
}
